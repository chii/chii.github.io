{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","scene","THREE","camera","window","innerWidth","innerHeight","renderer","setClearColor","setSize","shadowMap","enabled","axes","add","planeGeometry","planeMaterial","color","plane","receiveShadow","rotation","x","Math","PI","position","set","cubeGeometry","cubeMaterial","wireframe","cube","castShadow","sphereGeometry","sphereMaterial","sphere","spotLight","lookAt","document","getElementById","appendChild","domElement","stats","Stats","setMode","style","right","top","initStats","step","renderScene","update","y","z","abs","sin","requestAnimationFrame","render","id","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootElement","ReactDOM"],"mappings":"sQAqGeA,E,kLA5FT,IAAIC,EAAQ,IAAIC,IACZC,EAAS,IAAID,IAAyB,GAAIE,OAAOC,WAAWD,OAAOE,YAAa,GAAK,KAErFC,EAAW,IAAIL,IACnBK,EAASC,cAAc,IAAIN,IAAY,WACvCK,EAASE,QAASL,OAAOC,WAAYD,OAAOE,aAC5CC,EAASG,UAAUC,SAAU,EAE7B,IAAIC,EAAO,IAAIV,IAAiB,IAChCD,EAAMY,IAAID,GAEV,IAAIE,EAAgB,IAAIZ,IAAoB,GAAI,IAC5Ca,EAAgB,IAAIb,IAA0B,CAACc,MAAO,WACtDC,EAAQ,IAAIf,IAAWY,EAAeC,GAE1CE,EAAMC,eAAgB,EACtBD,EAAME,SAASC,GAAK,GAAMC,KAAKC,GAC/BL,EAAMM,SAASC,IAAK,GAAI,EAAG,GAE3BvB,EAAMY,IAAII,GAEV,IAAIQ,EAAe,IAAIvB,IAAmB,EAAG,EAAG,GAC5CwB,EAAe,IAAIxB,IAA2B,CAAEc,MAAO,MAAUW,WAAW,IAC5EC,EAAO,IAAI1B,IAAYuB,EAAcC,GAEzCE,EAAKC,YAAa,EAClBD,EAAKL,SAASC,KAAM,EAAG,EAAG,GAC1BvB,EAAMY,IAAKe,GAEX,IAAIE,EAAiB,IAAI5B,IAAsB,EAAG,GAAI,IAClD6B,EAAiB,IAAI7B,IAA0B,CAAEc,MAAO,QAAUW,WAAW,IAC7EK,EAAS,IAAI9B,IAAW4B,EAAgBC,GAE5CC,EAAOH,YAAa,EACpBG,EAAOT,SAASC,IAAK,GAAI,EAAG,GAC5BvB,EAAMY,IAAImB,GAGV,IAAIC,EAAY,IAAI/B,IAAgB,UACpC+B,EAAUJ,YAAa,EACvBI,EAAUV,SAASC,KAAM,GAAI,IAAK,GAClCvB,EAAMY,IAAIoB,GAEV9B,EAAOoB,SAASC,KAAM,GAAI,GAAI,IAC9BvB,EAAMsB,SAASC,IAAK,IAAK,EAAI,GAC7BrB,EAAO+B,OAAOjC,EAAMsB,UAEAY,SAASC,eAAe,WAChCC,YAAa9B,EAAS+B,YAGlC,IAAIC,EAEJ,WACI,IAAIA,EAAQ,IAAIC,EAOhB,OANAD,EAAME,QAAQ,GACdF,EAAMD,WAAWI,MAAMnB,SAAW,WAClCgB,EAAMD,WAAWI,MAAMC,MAAQ,MAC/BJ,EAAMD,WAAWI,MAAME,IAAM,MAC7BT,SAASC,eAAe,gBAAgBC,YACpCE,EAAMD,YACHC,EAVCM,GAaZ,IAAIC,EAAO,GAEO,SAAdC,IAEAR,EAAMS,SAENpB,EAAKT,SAASC,GAAK,IACnBQ,EAAKT,SAAS8B,GAAK,IACnBrB,EAAKT,SAAS+B,GAAK,IAEnBJ,GAAQ,IACRd,EAAOT,SAASH,EAAI,GAAO,GAAMC,KAAK8B,IAAIL,GAC1Cd,EAAOT,SAAS0B,EAAI,EAAK,GAAK5B,KAAK8B,IAAI9B,KAAK+B,IAAIN,IAEhDO,sBAAuBN,GACvBxC,EAAS+C,OAAQrD,EAAOE,GAE5B4C,K,+BAIE,OACI,qBAAKQ,GAAG,gB,GAzFFC,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFRQ,EAAc/B,SAASC,eAAe,QAC5C+B,IAASb,OAAO,cAAC,EAAD,IAASY,GAWzBT,M","file":"static/js/main.6b703698.chunk.js","sourcesContent":["import './App.css';\nimport React, { Component } from \"react\";\n//import ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport * as Stats from \"stats-js\";\n\nclass App extends Component {\n  componentDidMount() {\n      // === THREE.JS CODE START ===\n      var scene = new THREE.Scene();\n      var camera = new THREE.PerspectiveCamera( 45, window.innerWidth/window.innerHeight, 0.1, 1000 );\n\n      var renderer = new THREE.WebGLRenderer();\n      renderer.setClearColor(new THREE.Color(0xEEEEEE));\n      renderer.setSize( window.innerWidth, window.innerHeight );\n      renderer.shadowMap.enabled = true;\n\n      var axes = new THREE.AxesHelper(20);\n      scene.add(axes);\n\n      var planeGeometry = new THREE.PlaneGeometry(60, 20);\n      var planeMaterial = new THREE.MeshLambertMaterial({color: 0xcccccc});\n      var plane = new THREE.Mesh(planeGeometry, planeMaterial);\n\n      plane.receiveShadow = true;\n      plane.rotation.x = -0.5 * Math.PI;\n      plane.position.set( 15, 0, 0, );\n\n      scene.add(plane);\n\n      var cubeGeometry = new THREE.BoxGeometry( 4, 4, 4 );\n      var cubeMaterial = new THREE.MeshLambertMaterial( { color: 0x00ff00, wireframe: false } );\n      var cube = new THREE.Mesh( cubeGeometry, cubeMaterial );\n\n      cube.castShadow = true;\n      cube.position.set( -4, 3, 0 );\n      scene.add( cube );\n\n      var sphereGeometry = new THREE.SphereGeometry( 4, 20, 20 );\n      var sphereMaterial = new THREE.MeshLambertMaterial({ color: 0x7777ff, wireframe: false });\n      var sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n\n      sphere.castShadow = true;\n      sphere.position.set( 20, 4, 2 );\n      scene.add(sphere);\n\n\n      var spotLight = new THREE.SpotLight(0xffffff);\n      spotLight.castShadow = true;\n      spotLight.position.set( -20, 30, -5 );\n      scene.add(spotLight);\n\n      camera.position.set( -30, 40, 30 );\n      scene.position.set( 100, 0 , 0 );\n      camera.lookAt(scene.position);\n\n      const rootElement = document.getElementById('threejs');\n      rootElement.appendChild( renderer.domElement );\n      //this.mount.appendChild( renderer.domElement );\n\n      var stats = initStats();\n\n      function initStats() {\n          var stats = new Stats();\n          stats.setMode(0);\n          stats.domElement.style.position = 'absolute';\n          stats.domElement.style.right = '0px';\n          stats.domElement.style.top = '0px';\n          document.getElementById(\"Stats-output\").appendChild(\n              stats.domElement);\n          return stats;\n      }\n\n      var step = 0;\n\n      var renderScene = function () {\n\n          stats.update();\n\n          cube.rotation.x += 0.02;\n          cube.rotation.y += 0.02;\n          cube.rotation.z += 0.02;\n\n          step += 0.04;\n          sphere.position.x = 20 + ( 10 * (Math.abs(step)));\n          sphere.position.y = 2 + (10 * Math.abs(Math.sin(step)));\n\n          requestAnimationFrame( renderScene );\n          renderer.render( scene, camera );\n      };\n      renderScene();\n      // === THREE.JS EXAMPLE CODE END ===\n  }\n    render() {\n        return (\n            <div id=\"threejs\" />\n        )\n    }\n}\n//const rootElement = document.getElementById(\"root\");\n//ReactDOM.render(<App />, rootElement);\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n//ReactDOM.render(\n//  <React.StrictMode>\n//    <App />\n//  </React.StrictMode>,\n//  document.getElementById('root')\n//);\n//\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}